/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package toko;
//import com.google.zxing.*;
//import com.google.zxing.client.j2se.*;
//import com.google.zxing.common.BitMatrix;

import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.math.BigDecimal;
import java.sql.*;
import java.sql.ResultSet;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author Lenovo
 */
public class barang extends javax.swing.JFrame {

    DefaultTableModel m;

//    private String kode_barang;
    private String kode_barang;
    private String nama_barang;
    private String kategori_barang;
    private String merk;
    private String stok;
    private String harga_beli;
    private String harga_jual;
    private String satuan;
    private boolean databaru;
    
//    public void autonumber(){
//        try{
//            Connection connection = koneksi.getConnection();
//            Statement s = connection.createStatement();
//            String sql = "SELECT * FROM barang ORDER BY kode_barang DESC";
//            ResultSet r = s.executeQuery(sql);
//            if(r.next()){
//                String NoFaktur = r.getString("kode_barang").substring(2);
//                String BR = "" + (Integer.parseInt(NoFaktur)+1);
//                String Nol = "";
//                
//                if (BR.length() == 1)
//                    {Nol = "00";}
//                else if (BR.length()==2)
//                    {Nol = "0";}
//                else if(BR.length() ==3)
//                    {Nol = "";}
//                
//                txt_kode
//            }
//        }
//    }
    
    public barang() {
        initComponents();
        desainTabel();
        tampildatabase(); 
        loadBarcode();
//        loadData();
//        btn_edit.setEnabled(false);
//        btn_hapus.setEnabled(false);
//        BTN_TAMBAH.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBL_PRODUK = new javax.swing.JTable();
        BTN_TAMBAH = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        btn_edit = new javax.swing.JButton();
        TXT_CARI = new javax.swing.JTextField();
        btn_hapus = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jButton30 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        btn_transaksi2 = new javax.swing.JButton();
        btn_laporan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(220, 209, 180));

        jPanel5.setBackground(new java.awt.Color(79, 61, 26));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Admin Arti Bakery");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(188, 163, 127));
        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Data Barang");

        TBL_PRODUK.setAutoCreateRowSorter(true);
        TBL_PRODUK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        TBL_PRODUK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NO", "NAMA", "USERNAME", "AKSI"
            }
        ));
        jScrollPane1.setViewportView(TBL_PRODUK);

        BTN_TAMBAH.setBackground(new java.awt.Color(79, 61, 26));
        BTN_TAMBAH.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BTN_TAMBAH.setForeground(new java.awt.Color(255, 255, 255));
        BTN_TAMBAH.setText("Tambah Data");
        BTN_TAMBAH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_TAMBAHActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(79, 61, 26));
        btn_edit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_edit.setForeground(new java.awt.Color(255, 255, 255));
        btn_edit.setText("Edit Data");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        TXT_CARI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TXT_CARIMouseClicked(evt);
            }
        });
        TXT_CARI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXT_CARIActionPerformed(evt);
            }
        });
        TXT_CARI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXT_CARIKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXT_CARIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXT_CARIKeyTyped(evt);
            }
        });

        btn_hapus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_hapus.setText("Hapus Data");
        btn_hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_hapusActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(79, 61, 26));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Cari");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                        .addGap(18, 18, 18))))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(295, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(TXT_CARI, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(BTN_TAMBAH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_hapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_edit)))
                .addGap(17, 17, 17))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXT_CARI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_TAMBAH)
                    .addComponent(btn_edit)
                    .addComponent(btn_hapus))
                .addGap(16, 16, 16)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBackground(new java.awt.Color(220, 209, 180));
        jPanel14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), java.awt.Color.black, java.awt.Color.black));

        jButton26.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-home-18.png")); // NOI18N
        jButton26.setText("Beranda");
        jButton26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton26.setIconTextGap(10);
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-user-25.png")); // NOI18N
        jButton27.setText("User");
        jButton27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton27.setIconTextGap(10);
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton28.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-food-20.png")); // NOI18N
        jButton28.setText("Data Barang");
        jButton28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton28.setIconTextGap(10);
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton14.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-qr-code-20.png")); // NOI18N
        jButton14.setText("Barcode");
        jButton14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton14.setIconTextGap(10);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton29.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-logout-20.png")); // NOI18N
        jButton29.setText("Logout");
        jButton29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton29.setIconTextGap(10);
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Arti Bakery");

        jButton30.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-product-20.png")); // NOI18N
        jButton30.setText("Kategori");
        jButton30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton30.setIconTextGap(10);
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-dessert-70.png")); // NOI18N

        btn_transaksi2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-cheque-20.png")); // NOI18N
        btn_transaksi2.setText("Transaksi");
        btn_transaksi2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn_transaksi2.setIconTextGap(10);
        btn_transaksi2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_transaksi2ActionPerformed(evt);
            }
        });

        btn_laporan.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Downloads\\icons8-total-sales-20.png")); // NOI18N
        btn_laporan.setText("Laporan");
        btn_laporan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn_laporan.setIconTextGap(10);
        btn_laporan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_laporanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_transaksi2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_laporan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addComponent(jSeparator6))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(36, 36, 36))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jButton26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_transaksi2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_laporan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        int barisTerpilih = TBL_PRODUK.getSelectedRow();

        if (barisTerpilih == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin diedit.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                Connection connection = koneksi.getConnection(); // Menggunakan koneksi database terpisah

                DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
                String kode_barang = model.getValueAt(barisTerpilih, 0).toString(); // Mengambil nilai kode_barang dari baris terpilih

                String query = "SELECT * FROM barang WHERE kode_barang = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, kode_barang);

                    ResultSet resultSet = preparedStatement.executeQuery();

                    if (resultSet.next()) {
                        // Menampilkan form edit menggunakan JDialog
                        tampilkanFormEditDialog(resultSet);
                    } else {
                        JOptionPane.showMessageDialog(this, "Data tidak ditemukan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                    }

                    resultSet.close();
                }

                // Menutup koneksi
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void BTN_TAMBAHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_TAMBAHActionPerformed
        tambah_barang t = new tambah_barang();
//        t.setSize(388, 363); // Ganti 800 dan 600 dengan lebar dan tinggi yang diinginkan
        t.setLocationRelativeTo(null); // Menempatkan frame di tengah layar
        t.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BTN_TAMBAHActionPerformed

    private void TXT_CARIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXT_CARIActionPerformed
//        cariData();

        String kode_barang = TXT_CARI.getText();
        cariDanTampilkanData(kode_barang);
    }//GEN-LAST:event_TXT_CARIActionPerformed

    private void btn_hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_hapusActionPerformed
        int barisTerpilih = TBL_PRODUK.getSelectedRow();

        if (barisTerpilih == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                Connection connection = koneksi.getConnection(); // Menggunakan koneksi database terpisah

                DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
                String kode_barang = model.getValueAt(barisTerpilih, 0).toString(); // Mengambil nilai kode_barang dari baris terpilih

                String query = "DELETE FROM barang WHERE kode_barang = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, kode_barang);

                    int affectedRows = preparedStatement.executeUpdate();

                    if (affectedRows > 0) {
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                        model.removeRow(barisTerpilih); // Refresh tampilan setelah hapus data
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                    }
                }

                // Menutup koneksi
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_hapusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Hasil dari pemindaian barcode
//        String hasilPemindaian = bacaBarcode(pathToImage);
//        pindaiBarcode();
        String kode_barang = TXT_CARI.getText();
        cariDanTampilkanData(kode_barang);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TXT_CARIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXT_CARIKeyPressed
//        String Barcode = TXT_CARI.getText();
////        
////        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
////            try (Connection connection = koneksi.getConnection()) {
////            JOptionPane.showMessageDialog(this, "Masukan Barcode disini" + Barcode);
////            String query = "SELECT * FROM barang WHERE kode_barang = ?";
////                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
////                    preparedStatement.setString(1, kode_barang);
////                    ResultSet resultSet = preparedStatement.executeQuery();
////                    System.out.println("Executing query for kode_barang: " + kode_barang);
////
////                    while (resultSet.next() == true) {
////                        String kodeBarangResult = resultSet.getString("kode_barang");
////                        String namaBarang = resultSet.getString("nama_barang");
////                        String kategori = resultSet.getString("kategori_barang");
////                        String merk = resultSet.getString("merk");
////                        String stok = resultSet.getString("stok");
////                        String beli = resultSet.getString("harga_beli");
////                        String jual = resultSet.getString("harga_jual");
////                        String satuan = resultSet.getString("satuan");
////                    }
////                }
////        }   catch (SQLException ex) {
////                Logger.getLogger(barang.class.getName()).log(Level.SEVERE, null, ex);
////            }
////        }
////
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
////                    // Panggil metode untuk menangani pemindaian
////                    handleBarcodeScan(TXT_CARI.getText());
////                }else{
////            cariDanTampilkanData(kode_barang);
//
//            DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
//            
//            model.addColumn("KODE BARANG");
//            model.addColumn("NAMA BARANG");
//            model.addColumn("KATEGORI");
//            model.addColumn("MERK");
//            model.addColumn("STOK");
//            model.addColumn("HARGA BELI");
//            model.addColumn("HARGA JUAL");
//            model.addColumn("SATUAN");
//            
//            try {
//                Connection connection = koneksi.getConnection();
//                String sql = "SELECT * FROM barang  WHERE kode_barang='"+TXT_CARI.getText()+"'";
//                Statement stat = connection.createStatement();
//                ResultSet rs = stat.executeQuery(sql);
//                
//                while (rs.next()) {
//                    model.addRow(new Object[]{
//                    rs.getString(1),
//                    rs.getString(2),
//                    rs.getString(3),
//                    rs.getString(4),
//                    rs.getString(5),
//                    rs.getString(6),
//                    rs.getString(7),
//                    rs.getString(8)
//                });
//            }
//            TBL_PRODUK.setModel(model);
//            } catch(Exception e){
//                
//        }
//        }

//
//        String key=TXT_CARI.getText();
//        System.out.println(key);  
//        
//        if(key!=""){
//            cariData(key);
//        }else{
////            tampilData();
//            tampildatabase();
//        }
    }//GEN-LAST:event_TXT_CARIKeyPressed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        home h = new home();
        h.setExtendedState(JFrame.MAXIMIZED_BOTH);
        h.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        users u = new users();
        u.setExtendedState(JFrame.MAXIMIZED_BOTH);
        u.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        barang b = new barang();
        b.setExtendedState(JFrame.MAXIMIZED_BOTH);
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        Barcode b = new Barcode();
        b.setExtendedState(JFrame.MAXIMIZED_BOTH);
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        boolean isLoggedIn = false;

        // Tampilkan pesan logout
        int konfirmasi = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin keluar dari aplikasi?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (konfirmasi == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Anda berhasil logout.");
        }
        //        JOptionPane.showMessageDialog(this, "Anda berhasil logout.");

        // Tutup frame halaman login
        dispose();

        // Buka frame login

        showLoginForm();
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        kategori k = new kategori();
        k.setExtendedState(JFrame.MAXIMIZED_BOTH);
        k.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton30ActionPerformed

    private void btn_transaksi2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_transaksi2ActionPerformed
        transaksi t = new transaksi();
        t.setExtendedState(JFrame.MAXIMIZED_BOTH);
        t.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_transaksi2ActionPerformed

    private void btn_laporanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_laporanActionPerformed
        laporan l = new laporan();
        l.setExtendedState(JFrame.MAXIMIZED_BOTH);
        l.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_laporanActionPerformed

    private void TXT_CARIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TXT_CARIMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_CARIMouseClicked

    private void TXT_CARIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXT_CARIKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_CARIKeyReleased

    private void TXT_CARIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXT_CARIKeyTyped
//        cariData();
    }//GEN-LAST:event_TXT_CARIKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new barang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_TAMBAH;
    private javax.swing.JTable TBL_PRODUK;
    private javax.swing.JTextField TXT_CARI;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_hapus;
    private javax.swing.JButton btn_laporan;
    private javax.swing.JButton btn_transaksi2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton30;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator6;
    // End of variables declaration//GEN-END:variables

    private void desainTabel() {
        Object[] kolom = {"KODE BARANG", "NAMA" ,"KATEGORI", "MERK", "STOK", "HARGA BELI", "HARGA JUAL", "SATUAN" };
        Object[][] data = null;
        m = new DefaultTableModel(data, kolom);
        TBL_PRODUK.setModel(m);
    }

    private void tampildatabase() {
        try {
            Connection connection = koneksi.getConnection();
            Statement statement = connection.createStatement();
            String query = "SELECT * FROM barang";
            ResultSet resultSet = statement.executeQuery(query);

            // Mengambil metadata untuk menentukan jumlah kolom
            ResultSetMetaData metaData = resultSet.getMetaData();
            int jumlahKolom = metaData.getColumnCount();

            // Membuat model tabel untuk JTable
            DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
            model.setRowCount(0);
            

//            // Menambahkan nama kolom ke model
//            for (int kolom = 1; kolom <= jumlahKolom; kolom++) {
//                model.addColumn(metaData.getColumnName(kolom));
//            }

            // Menambahkan data ke model
            while (resultSet.next()) {
                Object[] rowData = new Object[jumlahKolom];
                for (int kolom = 1; kolom <= jumlahKolom; kolom++) {
                    rowData[kolom - 1] = resultSet.getObject(kolom);
                }
                model.addRow(rowData);
            }

            // Menetapkan model pada tabel
            TBL_PRODUK.setModel(model);

            // Menutup koneksi
            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void simpan() throws SQLException {
//        if (databaru == true) {
//            try {
//                String sql = "INSERT INTO barang ('kode_barang', 'nama_barang', 'kategori_barang', 'merk', 'stok', 'harga_beli', 'harga_jual', 'satuan')"
//                        + "VALUES ('" + kode_barang + "','" + nama_barang + "','" + kategori_barang + "','" + merk + "','" + stok + "','" + harga_beli + "','" + harga_jual + "','" + satuan + "')";
//
//                // Eksekusi pernyataan SQL
//                java.sql.PreparedStatement pst = con.prepareStatement(sql);
//                pst.executeUpdate();
//
//                JOptionPane.showMessageDialog(null, "Berhasil disimpan");
//            } catch (SQLException e) {
//                JOptionPane.showMessageDialog(null, e.getMessage()); // Menampilkan pesan kesalahan yang lebih rinci
//            }
//        } else {
//            try {
//                String sql = "UPDATE produk SET kode_barang=?, nama_barang=?, kattegori_barang=?, merk=?, stok=?, harga_beli=?, harga_jual=?, satuan=? WHERE kondisi_sesuai";
//
//                // Gantilah kondisi_sesuai dengan kondisi yang sesuai dengan kebutuhan update Anda
//                java.sql.PreparedStatement pst = con.prepareStatement(sql);
//
//                // Mengatur parameter PreparedStatement sesuai dengan nilai yang diambil dari komponen GUI
////                
////                pst.setString(1, TXT_KODE.getText());
////                pst.setString(2, TXT_PRODUK.getText());
////                pst.setString(3, CMB_KATEGORI.getSelectedItem().toString());
////                pst.setString(4, TXT_MERK.getText());
////                int harga = Integer.parseInt(TXT_STOK.getText());
////                pst.setInt(5, harga);
////                int harga_beli = Integer.parseInt(TXT_HARGABELI.getText());
////                pst.setInt(6, harga_beli);
////                int harga_jual = Integer.parseInt(TXT_HARGAJUAL.getText());
////                pst.setInt(7, harga_jual);
////                pst.setString(8, TXT_SATUAN.getText());
//                
//
//                pst.executeUpdate();
//                JOptionPane.showMessageDialog(null, "Berhasil disimpan");
//            } catch (SQLException e) {
//                JOptionPane.showMessageDialog(null, e.getMessage());
//            }
//        }
//        GetData();

    }

    private void GetData() throws SQLException { // menampilkan data dari database
//        ResultSet rs = stat.executeQuery("SELECT * FROM barang");
//        while (rs.next()) {
//            String kode = rs.getString("kode_barang");
//            String nama = rs.getString("nama_barang");
//            String kategori = rs.getString("kategori_barang");
//            String merk = rs.getString("merk");
//            String stok = rs.getString("stok");
//            String harga_beli = rs.getString("harga_beli");
//            String harga_jual = rs.getString("harga_jual");
//            String satuan = rs.getString("satuan");
//            
//            Object[] kolom = {};
//            m.addRow(kolom);
//        }
//    }

    }

    private void tampilkanFormEditDialog(ResultSet resultSet) throws SQLException {
        // Membuat JDialog baru
        JDialog dialogEdit = new JDialog(this, "Edit Data Barang", true);
        dialogEdit.setSize(400, 300);
        dialogEdit.setLayout(new GridLayout(9, 2));

        // Komponen GUI untuk form edit
        JLabel labelKodeBarang = new JLabel("Kode Barang:");
        JTextField txtKodeBarang = new JTextField(resultSet.getString("kode_barang"));
        JLabel labelNama = new JLabel("Nama:");
        JTextField txtNama = new JTextField(resultSet.getString("nama_barang"));
        JLabel labelKategori = new JLabel("Kategori:");
        JTextField txtKategori = new JTextField(resultSet.getString("kategori_barang"));
        JLabel labelMerk = new JLabel("Merk:");
        JTextField txtMerk = new JTextField(resultSet.getString("merk"));
        JLabel labelStok = new JLabel("Stok:");
        JTextField txtStok = new JTextField(resultSet.getString("stok"));
        JLabel labelHargaBeli = new JLabel("Harga Beli:");
        JTextField txtHargaBeli = new JTextField(resultSet.getString("harga_beli"));
        JLabel labelHargaJual = new JLabel("Harga Jual:");
        JTextField txtHargaJual = new JTextField(resultSet.getString("harga_jual"));
        JLabel labelSatuan = new JLabel("Satuan:");
        JTextField txtSatuan = new JTextField(resultSet.getString("satuan"));

        JButton btnSimpan = new JButton("Simpan");
        btnSimpan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                simpanEditData(
                txtKodeBarang.getText(), 
                txtNama.getText(), 
                txtKategori.getText(), 
                txtMerk.getText(),
                Integer.parseInt(txtStok.getText()), 
                new BigDecimal(txtHargaBeli.getText()), 
                new BigDecimal(txtHargaJual.getText()), 
                txtSatuan.getText());
                dialogEdit.dispose();
            }

            private void simpanEditData(String kode_barang, String nama_barang, String kategori_barang, String merk, int stok, BigDecimal harga_beli, BigDecimal harga_jual, String satuan) {
                try {
                Connection connection = koneksi.getConnection(); 

                String query = "UPDATE barang SET nama_barang=?, kategori_barang=?, merk=?, stok=?, harga_beli=?, harga_jual=?, satuan=? WHERE kode_barang=?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, nama_barang);
                    preparedStatement.setString(2, kategori_barang);
                    preparedStatement.setString(3, merk);
                    preparedStatement.setInt(4, stok);
                    preparedStatement.setBigDecimal(5, harga_beli);
                    preparedStatement.setBigDecimal(6, harga_jual);
                    preparedStatement.setString(7, satuan);
                    preparedStatement.setString(8, kode_barang);

                    int affectedRows = preparedStatement.executeUpdate();

                    if (affectedRows > 0) {
                        JOptionPane.showMessageDialog(dialogEdit, "Data berhasil diupdate.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                        // Setelah update data, perbarui tampilan tabel
                        tampildatabase();
//                          tampilkanDataKodeBarang(kode_barang);
                    } else {
                        JOptionPane.showMessageDialog(dialogEdit, "Gagal mengupdate data.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                    }
                }

                // Menutup koneksi
                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

            private void tampilkanDataKodeBarang(String kode_barang) {
                DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
                model.setRowCount(0); // Hapus semua baris dari tabel

                // Query untuk mendapatkan data sesuai dengan kode_barang
                String query = "SELECT * FROM barang WHERE kode_barang = ?";

                try (Connection connection = koneksi.getConnection();
                     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, kode_barang);
                    ResultSet resultSet = preparedStatement.executeQuery();

                    while (resultSet.next()) {
                        Object[] data = {
                                resultSet.getString("kode_barang"),
                                resultSet.getString("nama_barang"),
                                resultSet.getString("kategori_barang"),
                                resultSet.getString("merk"),
                                resultSet.getInt("stok"),
                                resultSet.getBigDecimal("harga_beli"),
                                resultSet.getBigDecimal("harga_jual"),
                                resultSet.getString("satuan")
                        };
                        model.addRow(data);
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

        // Menambahkan komponen ke dialog
        dialogEdit.add(labelKodeBarang);
        dialogEdit.add(txtKodeBarang);
        dialogEdit.add(labelNama);
        dialogEdit.add(txtNama);
        dialogEdit.add(labelKategori);
        dialogEdit.add(txtKategori);
        dialogEdit.add(labelMerk);
        dialogEdit.add(txtMerk);
        dialogEdit.add(labelStok);
        dialogEdit.add(txtStok);
        dialogEdit.add(labelHargaBeli);
        dialogEdit.add(txtHargaBeli);
        dialogEdit.add(labelHargaJual);
        dialogEdit.add(txtHargaJual);
        dialogEdit.add(labelSatuan);
        dialogEdit.add(txtSatuan);
        dialogEdit.add(btnSimpan);

        dialogEdit.setVisible(true);
    
    }

    private void showLoginForm() {
       Login loginFrame = new Login();
        loginFrame.setVisible(true);
    }

    private void cariDanTampilkanData(String kode_barang) {
        DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
//        DefaultTableModel model = new DefaultTableModel();
        model.setRowCount(0);
        
        
        try (Connection connection = koneksi.getConnection()) {
            String query = "SELECT * FROM barang WHERE kode_barang = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, kode_barang);
                ResultSet resultSet = preparedStatement.executeQuery();
                System.out.println("Executing query for kode_barang: " + kode_barang);

                while (resultSet.next()) {
                    String kodeBarangResult = resultSet.getString("kode_barang");
                    String namaBarang = resultSet.getString("nama_barang");
                    String kategori = resultSet.getString("kategori_barang");
                    String merk = resultSet.getString("merk");
                    String stok = resultSet.getString("stok");
                    String beli = resultSet.getString("harga_beli");
                    String jual = resultSet.getString("harga_jual");
                    String satuan = resultSet.getString("satuan");

                    Object[] data = {kodeBarangResult, namaBarang, kategori, merk, stok, beli, jual, satuan};
                    model.addRow(data);
                }
                System.out.println("Number of rows retrieved: " + model.getRowCount());

                TBL_PRODUK.setModel(model);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void pindaiBarcode() {
    // Gunakan perpustakaan ZXing untuk membaca barcode dari gambar
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih Gambar Barcode");
    fileChooser.setFileFilter(new FileNameExtensionFilter("Gambar (*.png, *.jpg, *.jpeg)", "png", "jpg", "jpeg"));

    int result = fileChooser.showOpenDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String pathToImage = selectedFile.getAbsolutePath();

        String hasilPemindaian = bacaBarcode(pathToImage);

        if (hasilPemindaian != null) {
            // Isi JTextField dengan hasil pemindaian
            TXT_CARI.setText(hasilPemindaian);
        } else {
            JOptionPane.showMessageDialog(this, "Barcode tidak dapat dipindai.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
    
//    public String bacaBarcode(String pathToImage) {
//        try {
//            BufferedImage image = ImageIO.read(new File(pathToImage));
//            LuminanceSource source = new BufferedImageLuminanceSource(image);
//            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
//
//            Reader reader = new MultiFormatReader();
//            Result result = reader.decode(bitmap);
//
//            return result.getText();
//        } catch (NotFoundException | IOException e) {
//            e.printStackTrace();
//            return null;
//        }
//    } 

    private void loadBarcode() {
//        try {
//            int q;
//            
//            
//        }
    }

    private void handleBarcodeScan(String barcode) {
        DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
//        DefaultTableModel model = new DefaultTableModel();
        model.setRowCount(0);
        try {
            Connection connection = koneksi.getConnection();
//            String query = "SELECT b.nama_barang, b.stok, b.harga " +
//                       "FROM barcode bc " +
//                       "JOIN barang b ON bc.kode_barang = b.kode_barang " +
//                       "WHERE bc.barcode_value = ?";
              String query = "SELECT * FROM barang WHERE kode_barang = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, barcode);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String namaBarang = resultSet.getString("nama_barang");
                    int stok = resultSet.getInt("stok");
                    double harga = resultSet.getDouble("beli");

                    // Tambahkan hasil pemindaian ke dalam model tabel
                    Object[] data = {barcode, namaBarang, stok, harga};
                    model.addRow(data);
                } else {
                    JOptionPane.showMessageDialog(this, "Barang dengan barcode " + barcode + " tidak ditemukan.");
                }
                System.out.println("Number of rows retrieved: " + model.getRowCount());

                TBL_PRODUK.setModel(model);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error dalam mengakses database.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }

        // Bersihkan JTextField setelah pemindaian
        TXT_CARI.setText("");
    }

    private void cariData() {
//            DefaultTableModel model = (DefaultTableModel) TBL_PRODUK.getModel();
//            
//            model.addColumn("KODE BARANG");
//            model.addColumn("NAMA BARANG");
//            model.addColumn("KATEGORI");
//            model.addColumn("MERK");
//            model.addColumn("STOK");
//            model.addColumn("HARGA BELI");
//            model.addColumn("HARGA JUAL");
//            model.addColumn("SATUAN");
//            
//            try {
//                Connection connection = koneksi.getConnection();
//                String sql = "SELECT * FROM barang WHERE kode_barang = '%" + TXT_CARI.getText() + "%'" + "or nama_barang = '%" + TXT_CARI.getText() + "%'";
//                Statement stat = connection.createStatement();
//                ResultSet rs = stat.executeQuery(sql);
//                
//                while (rs.next()) {
//                    model.addRow(new Object[]{
//                    rs.getString(1),
//                    rs.getString(2),
//                    rs.getString(3),
//                    rs.getString(4),
//                    rs.getString(5),
//                    rs.getString(6),
//                    rs.getString(7),
//                    rs.getString(8)
//                });
//            }
//            TBL_PRODUK.setModel(model);
//            loadData();
//            } catch (Exception e){
//                System.out.println("Cari Data Eror");
//            }finally{
//        }

//        String barcode = TXT_CARI.getText().trim();
//
//    if (!barcode.isEmpty()) {
//        // Panggil metode yang telah diimplementasikan sebelumnya untuk mencari informasi barang
//        String[] informasiBarang = cariInformasiBarangDariDatabase(barcode);
//
//        if (informasiBarang != null) {
//            // Tampilkan informasi barang di JTextField atau JLabel sesuai kebutuhan
//            TXT_CARI.setText(barcode);
//            
//            tambahDataKeTabel(informasiBarang);
//        } else {
//            // Barang tidak ditemukan, atur JTextField atau JLabel ke nilai default atau kosong
//            TXT_CARI .setText("");
//        }
//    } else {
//        // Jika teks pencarian kosong, atur JTextField atau JLabel ke nilai default atau kosong
//        TXT_CARI.setText("");
//    }
    }

    private void loadData() {
        m.getDataVector().removeAllElements();
        
        m.fireTableDataChanged();
        
        try {
            Connection connection = koneksi.getConnection();
            Statement s = connection.createStatement();
            
            String sql = "SELECT * FROM barang";
            ResultSet r = s.executeQuery(sql);
            
            while (r.next()){
                Object[] o = new Object[8];
                o [0] = r.getString("kode_barang");
                o [1] = r.getString("nama_barang");
                o [2] = r.getString("kategori_barang");
                o [3] = r.getString("merk");
                o [4] = r.getString("stok");
                o [5] = r.getString("harga_beli");
                o [6] = r.getString("harga_jual");
                o [7] = r.getString("satuan");
                
                m.addRow(o);
            }
            r.close();
            s.close();
        } catch (Exception e){
            System.out.println("Terjadi Kesalahan");
        }
    }

    private String bacaBarcode(String pathToImage) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
